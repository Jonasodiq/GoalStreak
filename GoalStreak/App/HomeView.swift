//
//  ContentView.swift
//  GoalStreak
//
//  Created by Jonas Niyazson on 2025-04-29.
//

import SwiftUI
import AVFoundation

struct HomeView: View {
    @EnvironmentObject var goalViewModel: GoalViewModel
    @State private var selectedTab = 0
    @State private var audioPlayer: AVAudioPlayer?
    
    var body: some View {
      ZStack {
        TabView(selection: $selectedTab) {
          HomeListView()
            .tabItem {Image(systemName: "house")}
            .tag(0)
          
          StatsView()
            .tabItem {Image(systemName: "calendar.badge.checkmark")}
            .tag(1)
          
          GoalFormView(mode: .create, selectedTab: $selectedTab)
            .tabItem {EmptyView()}
            .tag(2)
          
          GroupView()
            .tabItem {Image(systemName: "person.3")}
            .tag(3)

          SettingsView()
            .tabItem {Image(systemName: "gearshape")}
            .tag(4)
        } //: - TabView
        
        VStack {
          Spacer()
          HStack {
            Spacer()
            Button(action: {
                SoundPlayer.play("pop")
                selectedTab = 2
            }) {
              Image(systemName: "plus.circle.fill")
                .resizable()
                .frame(width: 60, height: 60)
                .foregroundColor(selectedTab == 2 ? .blue : .gray.opacity(0.5))
                .background(Color.white.clipShape(Circle()))
            }
            .offset(y: -8)
            
            Spacer()
          }
        } //: - VStack
        .onChange(of: selectedTab) { oldValue, newValue in
          SoundPlayer.play("pop")
        }
      } //: - ZStack
    } //: - Body
}

#Preview {
    HomeView()
        .environmentObject(GoalViewModel())
        .environmentObject(LocalizationManager())
}

/**
 üé® 2. UI/UX (Anv√§ndarupplevelse)
 ‚úÖ Styrkor
 Appen √§r f√§rgrik, har tydlig visuell hierarki och tilltalande grafik.
 Feedback genom ljud, animationer och notiser h√∂jer k√§nslan av bel√∂ning.
 St√∂d f√∂r ljus/m√∂rkt l√§ge och flerspr√•kighet √§r utm√§rkt.
 ‚ö†Ô∏è F√∂rb√§ttringsf√∂rslag
 Del                       F√∂rslag
 M√•lformul√§r          Visa realtidsfeedback ("Ogiltigt v√§rde" eller "M√•lv√§rde kr√§vs") under textf√§ltet
 TimerView            Visa en mer tydlig "paus"-status n√§r timern √§r inaktiv (gr√• overlay t.ex.)
 HomeListView      L√•t anv√§ndaren filtrera p√• kategori/emoji eller taggar, inte bara sortera
 Accessibility        Anv√§nd accessibilityLabel och VoiceOver-st√∂d f√∂r anv√§ndare med nedsatt syn
 F√∂r nyb√∂rjare      L√§gg till onboarding/instruktionsvy f√∂r nya anv√§ndare om vad "streaks" √§r
 */


/**
 üß™ 3. Testbarhet & Strukturf√∂rb√§ttringar
 ‚úÖ Bra design
 Du anv√§nder @EnvironmentObject, vilket underl√§ttar testning av vyer i isolation.

 ‚ö†Ô∏è F√∂rb√§ttringsm√∂jligheter
 Del                    Problem                                                                    F√∂rslag
 ViewModel        All Firebase-logik √§r inbakad i GoalViewModel        Bryt ut datalager i en egen klass (e.g. GoalRepository) f√∂r l√§ttare mockning/test
 Tester               Ingen enhetstestning i sikte                                      Skriv tester f√∂r AuthViewModel, GoalViewModel och GoalLogic (t.ex. streakber√§kning)
 UI Tester           Du kan dra nytta av @testable import och XCTest f√∂r integrationstester med TimerView, GoalFormView
 Mock Data        Skapa en MockGoalViewModel och MockAuthViewModel f√∂r previews och tester
 */


/**
 üß≠ N√§sta steg: Rekommenderade √•tg√§rder
 ‚úÖ Akuta f√∂rb√§ttringar:

 R√§tta datumj√§mf√∂relsebugg
 L√§gg till felhantering i UI f√∂r Firebase-fel
 Begr√§nsa √•tkomst via Firestore Security Rules

 üöÄ N√§sta niv√•:

 Inf√∂r testbar datalagerstruktur (GoalRepository)
 L√§gg till Unit Tests och UI Tests
 F√∂rb√§ttra formul√§rvalidering och inputfeedback
 L√§gg till onboarding eller hj√§lpfunktion f√∂r nya anv√§ndare


 */
